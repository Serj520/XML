JSON
 4. Создать внешний репозиторий c названием JSON:
В профиге на gthub.com заходим в репозитории и нажимаем "new" создаем новый.
Жмякаем "create repository". Не забываем про "code" где берем линк для клонирования и выбираем "https"
 5. Клонировать репозиторий JSON на локальный компьютер
Выбираем нужную директорию командами cd, cd .., mkdir  и т.д. В выбранной директории с 
помощью команды git clone и копировании ссылки создаем таки клон репозитория github  на своем компьютере.
 6. Внутри локального JSON создать файл “new.json”  touch(>) new.json 
 7. Добавить файл под гит git add . (new.json)
проверим коммандой git status
 8. Закоммитить файл git commit -m"коммент"
 9. Отправить файл на внешний GitHub репозиторий git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
vim neew.json, редактируем и сохраняем :wq
 11. Отправить изменения на внешний репозиторий - git commit -am"new info added", git push 
 12. Создать файл preferences.json создаю сразу два файла touch preferences.json skills.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
  vim preferences.json
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON 
vim skills.json
 15. Отправить сразу 2 файла на внешний репозиторий.
git add .
git commit -m"replica" 
git push
 16. На веб интерфейсе создать файл bug_report.json.
Путем жмякания кнопок add file-->create a new file создаем файл bug_report.json
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
ишем коммит и сохраняем в репозитории нажатием под полем редактирования файла create a new file.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
Go to file, выбираем bug_report.jsonБ справа изображение ручки/карандаша edit file.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON git pull
проверили ls -la в папке появился файл из репозитория


XML
 21. Создать внешний репозиторий c названием XML.
Заходим в профиль. Выбираем repositories, зеленая кнопка new.
Выбираем код HTTPS и копируем
 22. Клонировать репозиторий XML на локальный компьютер.
git clone "ссылка для клонирования"
 23. Внутри локального XML создать файл “new.xml”.
> new.xml
 24. Добавить файл под гит.
git add new.xml 
 25. Закоммитить файл.
git commit -m "created a new file.empty"
 26. Отправить файл на внешний GitHub репозиторий
git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
vim new.xml
 28. Отправить изменения на внешний репозиторий.
git commit -am"add six lines"
git push
 29. Создать файл preferences.xml
Создам сразу два: touch preferences.xml skills.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
vim preferences.xml
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
vim skills.xml
 32. Сделать коммит в одну строку.
git commit -am"add lines"
 33. Отправить сразу 2 файла на внешний репозиторий.
git  push
 34. На веб интерфейсе создать файл bug_report.xml.
add file -->create new file,  name & commit
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
Go to file --> edit
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
жмем на кнопочку внизу.
 38. Синхронизировать внешний и локальный репозиторий XML 
git pull
проверка ls -la, cat  bug_report.xml 

TXT
 1. Создать внешний репозиторий c названием TXT.
profil --> reposotories-->new 
Создаеми копируем ссылку для клона
 2. Клонировать репозиторий TXT на локальный компьютер.
git clone /ссылка/
 3. Внутри локального TXT создать файл “new.txt”.
>new.txt
 4. Добавить файл под гит.
git add new.txt
 5. Закоммитить файл.
git commit -m"текст"
 6. Отправить файл на внешний GitHub репозиторий.
git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). 
Всё написать в формате TXT.
vim new.txt
 8. Отправить изменения на внешний репозиторий.
git status - для контроля
git commit -am "text"
git push
 9. Создать файл preferences.txt 
что 2 раза не вставать
touch preferences.txt skills.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, 
любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
vim preferences.txt
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
vim sklls.txt
 12. Сделать коммит в одну строку.
git commit -am"text"
 13. Отправить сразу 2 файла на внешний репозиторий.
git push
 14. На веб интерфейсе создать файл bug_report.txt.
в репозитории add file-->create new file
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Добавляем содержимое, комментарий и жмякаем внизу зеленую клавишу
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
в репозитории go to file-->change file-->edit file
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Добавляем новый комментарий и жмякаем зеленую клавишу
 18. Синхронизировать внешний и локальный репозиторий TXT
git pull
смотрим получилось или нет ls
